# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Zalando SE
# This file is distributed under the same license as the Connexion package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Connexion 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../request.rst:2
msgid "Request Handling"
msgstr ""

#: ../../request.rst:3
msgid ""
"Connexion validates incoming requests for conformance with the schemas "
"described in swagger specification."
msgstr ""

#: ../../request.rst:6
msgid ""
"Request parameters will be provided to the handler functions as keyword "
"arguments if they are included in the function's signature, otherwise "
"body parameters can be accessed from ``connexion.request.json`` and query"
" parameters can be accessed from ``connexion.request.args``."
msgstr ""

#: ../../request.rst:12
msgid "Request Validation"
msgstr ""

#: ../../request.rst:13
msgid ""
"Both the request body and parameters are validated against the "
"specification, using `jsonschema`_."
msgstr ""

#: ../../request.rst:16
msgid ""
"If the request doesn't match the specification connexion will return a "
"400 error."
msgstr ""

#: ../../request.rst:20
msgid "Automatic Parameter Handling"
msgstr ""

#: ../../request.rst:21
msgid ""
"Connexion automatically maps the parameters defined in your endpoint "
"specification to arguments of your Python views as named parameters and "
"with value casting whenever possible. All you need to do is define the "
"endpoint's parameters with matching names with your views arguments."
msgstr ""

#: ../../request.rst:26
msgid "As example you have an endpoint specified as:"
msgstr ""

#: ../../request.rst:41
msgid "And the view function:"
msgstr ""

#: ../../request.rst:51
msgid ""
"In this example Connexion will automatically identify that your view "
"function expects an argument named `message` and will assign the value of"
" the endpoint parameter `message` to your view function."
msgstr ""

#: ../../request.rst:55
msgid "Connexion will also use default values if they are provided."
msgstr ""

#: ../../request.rst:57
msgid ""
"In the OpenAPI 3.x.x spec, the requestBody does not have a name. By "
"default it will be passed in as 'body'. You can optionally provide the x"
"-body-name parameter in your requestBody schema to override the name of "
"the parameter that will be passed to your handler function."
msgstr ""

#: ../../request.rst:63
msgid ""
"Please note that when you have a parameter defined as *not* required at "
"your endpoint and your Python view have a non-named argument, when you "
"call this endpoint WITHOUT the parameter you will get an exception of "
"missing positional argument."
msgstr ""

#: ../../request.rst:70
msgid "Type casting"
msgstr ""

#: ../../request.rst:71
msgid ""
"Whenever possible Connexion will try to parse your argument values and do"
" type casting to related Python natives values. The current available "
"type castings are:"
msgstr ""

#: ../../request.rst:76
msgid "OpenAPI Type"
msgstr ""

#: ../../request.rst:76
msgid "Python Type"
msgstr ""

#: ../../request.rst:79
msgid "integer"
msgstr ""

#: ../../request.rst:79
msgid "int"
msgstr ""

#: ../../request.rst:81
msgid "string"
msgstr ""

#: ../../request.rst:81
msgid "str"
msgstr ""

#: ../../request.rst:83
msgid "number"
msgstr ""

#: ../../request.rst:83
msgid "float"
msgstr ""

#: ../../request.rst:85
msgid "boolean"
msgstr ""

#: ../../request.rst:85
msgid "bool"
msgstr ""

#: ../../request.rst:87
msgid "array"
msgstr ""

#: ../../request.rst:87
msgid "list"
msgstr ""

#: ../../request.rst:89
msgid "null"
msgstr ""

#: ../../request.rst:89
msgid "None"
msgstr ""

#: ../../request.rst:91
msgid "object"
msgstr ""

#: ../../request.rst:91
msgid "dict"
msgstr ""

#: ../../request.rst:94
msgid ""
"In the OpenAPI 2.0 specification, if the `array` type is used you can "
"define the `collectionFormat` used to deserialize the input. Connexion "
"currently supports collection formats \"pipes\" and \"csv\". The default "
"format is \"csv\"."
msgstr ""

#: ../../request.rst:98
msgid ""
"For more details about `collectionFormat`s please check the official "
"`OpenAPI 2.0 Specification`_."
msgstr ""

#: ../../request.rst:102
msgid ""
"In the `OpenAPI 2.0 Specification`_ if you use the ``array`` type, you "
"can define the ``collectionFormat`` do set the deserialization behavior. "
"Connexion currently supports \"pipes\" and \"csv\" as collection formats."
" The default format is \"csv\"."
msgstr ""

#: ../../request.rst:107
msgid ""
"Connexion is opinionated about how the URI is parsed for ``array`` types."
" The default behavior for query parameters that have been defined "
"multiple times is to join them all together. For example, if you provide "
"a URI with the the query string ``?letters=a,b,c&letters=d,e,f``, "
"connexion will set ``letters = ['a', 'b', 'c', 'd', 'e', 'f']``."
msgstr ""

#: ../../request.rst:113
msgid ""
"You can override this behavior by specifying the URI parser in the app or"
" api options."
msgstr ""

#: ../../request.rst:122
msgid ""
"You can implement your own URI parsing behavior by inheriting from "
"``connextion.decorators.uri_parsing.AbstractURIParser``."
msgstr ""

#: ../../request.rst:125
msgid "There are a handful of URI parsers included with connection."
msgstr ""

#: ../../request.rst:128
msgid "OpenAPIURIParser default: OpenAPI 3.0"
msgstr ""

#: ../../request.rst:128
msgid ""
"This parser adheres to the OpenAPI 3.x.x spec, and uses the ``style`` "
"parameter. Query parameters are parsed from left to right, so if a query "
"parameter is defined twice, then the right-most definition will take "
"precedence. For example, if you provided a URI with the query string "
"``?letters=a,b,c&letters=d,e,f``, and ``style: simple``, then connexion "
"will set ``letters = ['d', 'e', 'f']``. For additional information see "
"`OpenAPI 3.0 Style Values`_."
msgstr ""

#: ../../request.rst:136
msgid "Swagger2URIParser default: OpenAPI 2.0"
msgstr ""

#: ../../request.rst:136
msgid ""
"This parser adheres to the Swagger 2.0 spec, and will only join together "
"multiple instance of the same query parameter if the ``collectionFormat``"
" is set to ``multi``. Query parameters are parsed from left to right, so "
"if a query parameter is defined twice, then the right-most definition "
"wins. For example, if you provided a URI with the query string "
"``?letters=a,b,c&letters=d,e,f``, and ``collectionFormat: csv``, then "
"connexion will set ``letters = ['d', 'e', 'f']``"
msgstr ""

#: ../../request.rst:144
msgid "FirstValueURIParser"
msgstr ""

#: ../../request.rst:144
msgid ""
"This parser behaves like the Swagger2URIParser, except that it prefers "
"the first defined value. For example, if you provided a URI with the "
"query string ``?letters=a,b,c&letters=d,e,f`` and ``collectionFormat: "
"csv`` hen connexion will set ``letters = ['a', 'b', 'c']``"
msgstr ""

#: ../../request.rst:149
msgid "AlwaysMultiURIParser"
msgstr ""

#: ../../request.rst:149
msgid ""
"This parser is backwards compatible with Connexion 1.x. It joins together"
" multiple instances of the same query parameter."
msgstr ""

#: ../../request.rst:158
msgid "Parameter validation"
msgstr ""

#: ../../request.rst:160
msgid ""
"Connexion can apply strict parameter validation for query and form data "
"parameters.  When this is enabled, requests that include parameters not "
"defined in the swagger spec return a 400 error.  You can enable it when "
"adding the API to your application:"
msgstr ""

#: ../../request.rst:171
msgid "Nullable parameters"
msgstr ""

#: ../../request.rst:173
msgid ""
"Sometimes your API should explicitly accept `nullable parameters`_. "
"However OpenAPI specification currently does `not support`_ officially a "
"way to serve this use case, Connexion adds the `x-nullable` vendor "
"extension to parameter definitions. Its usage would be:"
msgstr ""

#: ../../request.rst:188
msgid ""
"It is supported by Connexion in all parameter types: `body`, `query`, "
"`formData`, and `path`. Nullable values are the strings `null` and "
"`None`."
msgstr ""

#: ../../request.rst:191
msgid ""
"Be careful on nullable parameters for sensitive data where the strings "
"\"null\" or \"None\" can be `valid values`_."
msgstr ""

#: ../../request.rst:194
msgid ""
"This extension will be removed as soon as OpenAPI/Swagger Specification "
"provide an official way of supporting nullable values."
msgstr ""

#: ../../request.rst:203
msgid "Header Parameters"
msgstr ""

#: ../../request.rst:205
msgid ""
"Currently, header parameters are not passed to the handler functions as "
"parameters. But they can be accessed through the underlying "
"``connexion.request.headers`` object which aliases the "
"``flask.request.headers`` object."
msgstr ""

#: ../../request.rst:215
msgid "Custom Validators"
msgstr ""

#: ../../request.rst:217
msgid ""
"By default, body and parameters contents are validated against OpenAPI "
"schema via ``connexion.decorators.validation.RequestBodyValidator`` or "
"``connexion.decorators.validation.ParameterValidator``, if you want to "
"change the validation, you can override the defaults with:"
msgstr ""

#: ../../request.rst:231
msgid "See custom validator example in ``examples/enforcedefaults``."
msgstr ""

