# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Zalando SE
# This file is distributed under the same license as the Connexion package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Connexion 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../security.rst:2
msgid "Security"
msgstr ""

#: ../../security.rst:5
msgid "OAuth 2 Authentication and Authorization"
msgstr ""

#: ../../security.rst:7
msgid ""
"Connexion supports one of the three OAuth 2 handling methods. With "
"Connexion, the API security definition **must** include a "
"``x-tokenInfoFunc`` or set ``TOKENINFO_FUNC`` env var."
msgstr ""

#: ../../security.rst:11
msgid ""
"``x-tokenInfoFunc`` must contain a reference to a function used to obtain"
" the token info. This reference should be a string using the same syntax "
"that is used to connect an ``operationId`` to a Python function when "
"routing. For example, an ``x-tokenInfoFunc`` of ``auth.verifyToken`` "
"would pass the user's token string to the function ``verifyToken`` in the"
" module ``auth.py``. The referenced function accepts a token string as "
"argument and should return a dict containing a ``scope`` field that is "
"either a space-separated list or an array of scopes belonging to the "
"supplied token. This list of scopes will be validated against the scopes "
"required by the API security definition to determine if the user is "
"authorized. You can supply a custom scope validation func with "
"``x-scopeValidateFunc`` or set ``SCOPEVALIDATE_FUNC`` env var, otherwise "
"``connexion.decorators.security.validate_scope`` will be used as default."
msgstr ""

#: ../../security.rst:26
msgid ""
"The recommended approach is to return a dict which complies with `RFC "
"7662 <rfc7662_>`_. Note that you have to validate the ``active`` or "
"``exp`` fields etc. yourself."
msgstr ""

#: ../../security.rst:30
msgid ""
"The ``sub`` property of the Token Info response will be passed in the "
"``user`` argument to the handler function."
msgstr ""

#: ../../security.rst:33
msgid "Deprecated features, retained for backward compability:"
msgstr ""

#: ../../security.rst:35
msgid ""
"As alternative to ``x-tokenInfoFunc``, you can set ``x-tokenInfoUrl`` or "
"``TOKENINFO_URL`` env var. It must contain a URL to validate and get the "
"token information which complies with `RFC 6749 <rfc6749_>`_. When both "
"``x-tokenInfoUrl`` and ``x-tokenInfoFunc`` are used, Connexion will "
"prioritize the function method. Connexion expects the authorization "
"server to receive the OAuth token in the ``Authorization`` header field "
"in the format described in `RFC 6750 <rfc6750_>`_ section 2.1. This "
"aspect represents a significant difference from the usual OAuth flow."
msgstr ""

#: ../../security.rst:43
msgid "``scope`` field can also be named ``scopes``."
msgstr ""

#: ../../security.rst:44
msgid "``sub`` field can also be named ``uid``."
msgstr ""

#: ../../security.rst:46
msgid ""
"You can find a `minimal OAuth example application`_ in Connexion's "
"\"examples\" folder."
msgstr ""

#: ../../security.rst:50
msgid "Basic Authentication"
msgstr ""

#: ../../security.rst:52
msgid ""
"With Connexion, the API security definition **must** include a "
"``x-basicInfoFunc`` or set ``BASICINFO_FUNC`` env var. It uses the same "
"semantics as for ``x-tokenInfoFunc``, but the function accepts three "
"parameters: username, password and required_scopes. If the security "
"declaration of the operation also has an oauth security requirement, "
"required_scopes is taken from there, otherwise it's None. This allows "
"authorizing individual operations with oauth scope while using basic "
"authentication for authentication."
msgstr ""

#: ../../security.rst:61
msgid ""
"You can find a `minimal Basic Auth example application`_ in Connexion's "
"\"examples\" folder."
msgstr ""

#: ../../security.rst:64
msgid "ApiKey Authentication"
msgstr ""

#: ../../security.rst:66
msgid ""
"With Connexion, the API security definition **must** include a "
"``x-apikeyInfoFunc`` or set ``APIKEYINFO_FUNC`` env var. It uses the same"
" semantics as for ``x-basicInfoFunc``, but the function accepts two "
"parameters: apikey and required_scopes."
msgstr ""

#: ../../security.rst:71
msgid ""
"You can find a `minimal API Key example application`_ in Connexion's "
"\"examples\" folder."
msgstr ""

#: ../../security.rst:74
msgid "Bearer Authentication (JWT)"
msgstr ""

#: ../../security.rst:76
msgid ""
"With Connexion, the API security definition **must** include a "
"``x-bearerInfoFunc`` or set ``BEARERINFO_FUNC`` env var. It uses the same"
" semantics as for ``x-tokenInfoFunc``, but the function accepts one "
"parameter: token."
msgstr ""

#: ../../security.rst:80
msgid ""
"You can find a `minimal JWT example application`_ in Connexion's "
"\"examples/openapi3\" folder."
msgstr ""

#: ../../security.rst:83
msgid "HTTPS Support"
msgstr ""

#: ../../security.rst:85
msgid ""
"When specifying HTTPS as the scheme in the API YAML file, all the URIs in"
" the served Swagger UI are HTTPS endpoints. The problem: The default "
"server that runs is a \"normal\" HTTP server. This means that the Swagger"
" UI cannot be used to play with the API. What is the correct way to start"
" a HTTPS server when using Connexion?"
msgstr ""

